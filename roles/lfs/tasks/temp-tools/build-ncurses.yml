---
- name: Unpack Ncurses
  become_user: root
  unarchive:
    src: "{{ lfs.mnt_dir }}/sources/ncurses-{{ lfs.ncurses_version }}.tar.gz"
    dest: "{{ lfs.mnt_dir }}/sources"
    owner: "{{ lfs.user }}"
    group: "{{ lfs.group }}"
    remote_src: yes


- name: Ensure that gawk is found first during configuration
  become_user: root
  shell: |
    sed -i s/mawk// configure
  args:
    chdir: "{{ lfs.mnt_dir }}/sources/ncurses-{{ lfs.ncurses_version }}"
  environment:
    LFS: "{{ lfs.mnt_dir }}"


- name: Create Ncurses Build Directory
  become_user: root
  file:
    path: "{{ lfs.mnt_dir }}/sources/ncurses-{{ lfs.ncurses_version }}/build"
    state: directory


- name: Configure the tic program on the build host
  become_user: root
  shell: |
    ../configure
  args:
    chdir: "{{ lfs.mnt_dir }}/sources/ncurses-{{ lfs.ncurses_version }}/build"
  environment:
    LFS: "{{ lfs.mnt_dir }}"


- name: Build the tic program on the build host
  become_user: root
  shell: |
    make -j {{ use_cores }} -C include
  args:
    chdir: "{{ lfs.mnt_dir }}/sources/ncurses-{{ lfs.ncurses_version }}/build"
  environment:
    LFS: "{{ lfs.mnt_dir }}"


- name: Build the tic program on the build host
  become_user: root
  shell: |
    make -j {{ use_cores }} -C progs tic
  args:
    chdir: "{{ lfs.mnt_dir }}/sources/ncurses-{{ lfs.ncurses_version }}/build"
  environment:
    LFS: "{{ lfs.mnt_dir }}"


- name: Configure Ncurses
  become_user: root
  shell: |
    export LFS_TGT=$(uname -m)-lfs-linux-gnu && \
    ./configure --prefix=/usr    \
    --host=$LFS_TGT               \
    --build=$(./config.guess)     \
    --mandir=/usr/share/man       \
    --with-manpage-format=normal  \
    --with-shared                 \
    --without-normal              \
    --with-cxx-shared             \
    --without-debug               \
    --without-ada                 \
    --disable-stripping
  args:
    chdir: "{{ lfs.mnt_dir }}/sources/ncurses-{{ lfs.ncurses_version }}"
  environment:
    LFS: "{{ lfs.mnt_dir }}"


- name: Build Ncurses
  become_user: root
  shell: |
    make -j {{ use_cores }}
  args:
    chdir: "{{ lfs.mnt_dir }}/sources/ncurses-{{ lfs.ncurses_version }}"
  environment:
    LFS: "{{ lfs.mnt_dir }}"


- name: Install Ncurses
  become_user: root
  shell: |
    make -j {{ use_cores }} DESTDIR=$LFS TIC_PATH=$(pwd)/build/progs/tic install
  args:
    chdir: "{{ lfs.mnt_dir }}/sources/ncurses-{{ lfs.ncurses_version }}"
  environment:
    LFS: "{{ lfs.mnt_dir }}"


# The libncurses.so library is needed by a few packages we will build soon. We create this symlink to use libncursesw.so as a replacement.
- name: Create this symlink to use libncursesw.so as a replacement
  become_user: root
  shell: |
    ln -sv libncursesw.so $LFS/usr/lib/libncurses.so
  args:
    chdir: "{{ lfs.mnt_dir }}/sources/ncurses-{{ lfs.ncurses_version }}"
  environment:
    LFS: "{{ lfs.mnt_dir }}"


# The header file curses.h contains the definition of various Ncurses data structures.
# With different preprocessor macro definitions two different sets of the data structure definition may be used:
# the 8-bit definition is compatible with libncurses.so and the wide-character definition is compatible with libncursesw.so.
# Since we are using libncursesw.so as a replacement of libncurses.so,
# edit the header file so it will always use the wide-character data structure definition compatible with libncursesw.so.
- name: Edit the header file so it will always use the wide-character data structure definition compatible with libncursesw.so
  become_user: root
  shell: |
    sed -e 's/^#if.*XOPEN.*$/#if 1/' -i $LFS/usr/include/curses.h
  args:
    chdir: "{{ lfs.mnt_dir }}/sources/ncurses-{{ lfs.ncurses_version }}"
  environment:
    LFS: "{{ lfs.mnt_dir }}"


