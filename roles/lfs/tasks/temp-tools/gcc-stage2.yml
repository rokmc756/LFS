---
- name: Build Libisl
  import_tasks: build-libisl.yml


- name: Unpack GCC
  become_user: root
  unarchive:
    remote_src: yes
    src: "{{ lfs.mnt_dir }}/sources/gcc-{{ lfs.gcc_version }}.tar.xz"
    dest: "{{ lfs.mnt_dir }}/sources"


- name: Create GCC Build Directory
  become_user: root
  file:
    path: "{{ lfs.mnt_dir }}/sources/gcc-{{ lfs.gcc_version }}/build"
    state: directory


- name: Unpack MPFR
  become_user: root
  unarchive:
    remote_src: yes
    src: "{{ lfs.mnt_dir }}/sources/mpfr-{{ lfs.mpfr_version }}.tar.xz"
    dest: "{{ lfs.mnt_dir }}/sources/gcc-{{ lfs.gcc_version }}"


- name: Unpack GMP
  become_user: root
  unarchive:
    remote_src: yes
    src: "{{ lfs.mnt_dir }}/sources/gmp-{{ lfs.gmp_version }}.tar.xz"
    dest: "{{ lfs.mnt_dir }}/sources/gcc-{{ lfs.gcc_version }}"


- name: Unpack MPC
  become_user: root
  unarchive:
    remote_src: yes
    src: "{{ lfs.mnt_dir }}/sources/mpc-{{ lfs.mpc_version }}.tar.gz"
    dest: "{{ lfs.mnt_dir }}/sources/gcc-{{ lfs.gcc_version }}"


- name: Copy LFS Scripts for GCC Build
  become_user: root
  template:
    src: "{{ item }}.j2"
    dest: "{{ lfs.mnt_dir }}/sources/gcc-{{ lfs.gcc_version }}/{{ item }}"
    mode: 0755
  register: copy_gcc_build_scripts
  with_items:
    - "gcc-stage2-prep.sh"
- debug: msg={{ copy_gcc_build_scripts }}


- name: Run a Script to Prepare for the GCC Build
  become_user: root
  shell: ./gcc-stage2-prep.sh
  ignore_errors: true
  args:
    chdir: "{{ lfs.mnt_dir }}/sources/gcc-{{ lfs.gcc_version }}/"


- name: Configure the GCC Build
  become_user: root
  shell: |
    export LFS_TGT=$(uname -m)-lfs-linux-gnu  &&
    ../configure                                   \
    --build=$(../config.guess)                     \
    --host=$LFS_TGT                                \
    --target=$LFS_TGT                              \
    LDFLAGS_FOR_TARGET=-L$PWD/$LFS_TGT/libgcc      \
    --prefix=/usr                                  \
    --with-build-sysroot=$LFS                      \
    --enable-default-pie                           \
    --enable-default-ssp                           \
    --disable-nls                                  \
    --disable-multilib                             \
    --disable-libatomic                            \
    --disable-libgomp                              \
    --disable-libquadmath                          \
    --disable-libsanitizer                         \
    --disable-libssp                               \
    --disable-libvtv                               \
    --enable-languages=c,c++
  args:
    executable: /bin/bash
    chdir: "{{ lfs.mnt_dir }}/sources/gcc-{{ lfs.gcc_version }}/build"
  environment:
    LFS: "{{ lfs.mnt_dir }}"
    PATH: "{{ lfs.mnt_dir }}/tools/bin:/bin:/usr/bin"


- name: Build GCC
  become_user: root
  shell: make -j {{ use_cores }}
  args:
    executable: /bin/bash
    chdir: "{{ lfs.mnt_dir }}/sources/gcc-{{ lfs.gcc_version }}/build"
  environment:
    LFS: "{{ lfs.mnt_dir }}"
    PATH: "{{ lfs.mnt_dir }}/tools/bin:/bin:/usr/bin"


- name: Install GCC
  become_user: root
  shell: make -j {{ use_cores }} DESTDIR=$LFS install
  args:
    executable: /bin/bash
    chdir: "{{ lfs.mnt_dir }}/sources/gcc-{{ lfs.gcc_version }}/build"
  environment:
    LFS: "{{ lfs.mnt_dir }}"
    PATH: "{{ lfs.mnt_dir }}/tools/bin:/bin:/usr/bin"


- name: Create a Utility Symlink
  file:
    src: "{{ lfs.mnt_dir }}/sources/gcc-{{ lfs.gcc_version }}/gcc"
    dest: "{{ lfs.mnt_dir}}/usr/bin/cc"
    owner: root
    group: root
    state: link


- name: Clean Up the GCC Sources
  become_user: root
  file:
    path: "{{ lfs.mnt_dir }}/sources/gcc-{{ lfs.gcc_version }}"
    state: absent


