---
- name: Unpack GCC
  become_user: root
  unarchive:
    remote_src: yes
    src: "{{ lfs.mnt_dir }}/sources/gcc-{{ lfs.gcc_version }}.tar.xz"
    dest: "{{ lfs.mnt_dir }}/sources"


- name: Create GCC Build Directory
  become_user: root
  file:
    path: "{{ lfs.mnt_dir }}/sources/gcc-{{ lfs.gcc_version }}/build"
    state: directory


- name: Configure the Libstdc++ Build
  become_user: root
  shell: |
    export LFS_TGT=$(uname -m)-lfs-linux-gnu &&     \
    ../libstdc++-v3/configure       \
    --host=$LFS_TGT                 \
    --build=$(../config.guess)      \
    --prefix=/usr                   \
    --disable-multilib              \
    --disable-nls                   \
    --disable-libstdcxx-pch         \
    --with-gxx-include-dir=/tools/$LFS_TGT/include/c++/14.2.0
  args:
    executable: /bin/bash
    chdir: "{{ lfs.mnt_dir }}/sources/gcc-{{ lfs.gcc_version }}/build"
  environment:
    LFS: "{{ lfs.mnt_dir }}"
    PATH: "{{ lfs.mnt_dir }}/tools/bin:/bin:/usr/bin"


- name: Build Libstdc++
  become_user: root
  shell: make -j {{ use_cores }}
  args:
    executable: /bin/bash
    chdir: "{{ lfs.mnt_dir }}/sources/gcc-{{ lfs.gcc_version }}/build"
  environment:
    LFS: "{{ lfs.mnt_dir }}"
    PATH: "{{ lfs.mnt_dir }}/tools/bin:/bin:/usr/bin"


- name: Install Libstdc++
  become_user: root
  shell: make -j {{ use_cores }} DESTDIR=$LFS install
  args:
    executable: /bin/bash
    chdir: "{{ lfs.mnt_dir }}/sources/gcc-{{ lfs.gcc_version }}/build"
  environment:
    LFS: "{{ lfs.mnt_dir }}"
    PATH: "{{ lfs.mnt_dir }}/tools/bin:/bin:/usr/bin"


- name: Clean the GCC Source Directory
  become_user: root
  file:
    path: "{{ lfs.mnt_dir }}/sources/gcc-{{ lfs.gcc_version }}"
    state: absent


#- name: Clean Up Libraries
#  become_user: root
#  file:
#    path: "{{ lfs.mnt_dir }}/usr/lib/lib{{ item }}.la"
#    state: absent
#  with_items:
#    - "stdc++"
#    - "stdc++fs"
#    - "supc++"

# https://gcc.gnu.org/legacy-ml/gcc-help/2012-07/msg00018.html

