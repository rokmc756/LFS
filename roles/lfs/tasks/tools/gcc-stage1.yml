#- name: Create the Sources Directory
#  become_user: root
#  file:
#    path: "{{ lfs.mnt_dir }}/sources/gcc-{{ lfs.gcc_version }}/{{ item }}"
#    state: directory
#    mode: 0755
#  with_items:
#    - mpfr
#    - gmp
#    - mpc
#    - scripts


#- name: Create Symbolic Link
#  file:
#   src: "/opt/application/i99/{{ SOURCE_FOLDER }}/"
#   dest: "/opt/application/i99/SYMLINK"
#   state: link


- name: Unpack GCC
  become_user: root
  unarchive:
    remote_src: yes
    src: "{{ lfs.mnt_dir }}/sources/gcc-{{ lfs.gcc_version }}.tar.xz"
    dest: "{{ lfs.mnt_dir }}/sources"


- name: Create GCC Build Directory
  become_user: root
  file:
    path: "{{ lfs.mnt_dir }}/sources/gcc-{{ lfs.gcc_version }}/build"
    state: directory


- name: Unpack MPFR
  become_user: root
  unarchive:
    remote_src: yes
    src: "{{ lfs.mnt_dir }}/sources/mpfr-{{ lfs.mpfr_version }}.tar.xz"
    dest: "{{ lfs.mnt_dir }}/sources/gcc-{{ lfs.gcc_version }}"
    # dest: "{{ lfs.mnt_dir }}/sources/gcc-{{ lfs.gcc_version }}/mpfr"
    # extra_opts: ['--strip-components=1', '--show-stored-names']


- name: Unpack GMP
  become_user: root
  unarchive:
    remote_src: yes
    src: "{{ lfs.mnt_dir }}/sources/gmp-{{ lfs.gmp_version }}.tar.xz"
    dest: "{{ lfs.mnt_dir }}/sources/gcc-{{ lfs.gcc_version }}"


- name: Unpack MPC
  become_user: root
  unarchive:
    remote_src: yes
    src: "{{ lfs.mnt_dir }}/sources/mpc-{{ lfs.mpc_version }}.tar.gz"
    dest: "{{ lfs.mnt_dir }}/sources/gcc-{{ lfs.gcc_version }}"


- name: Copy LFS Scripts for GCC Build
  become_user: root
  template:
    src: "{{ item }}.j2"
    dest: "{{ lfs.mnt_dir }}/sources/gcc-{{ lfs.gcc_version }}/{{ item }}"
    mode: 0755
  register: copy_gcc_build_scripts
  with_items:
    - "gcc-stage1-prep.sh"
- debug: msg={{ copy_gcc_build_scripts }}


- name: Run a Script to Prepare for the GCC Build
  become_user: root
  shell: ./gcc-stage1-prep.sh
  ignore_errors: true
  args:
    chdir: "{{ lfs.mnt_dir }}/sources/gcc-{{ lfs.gcc_version }}/"


- name: Configure the GCC Build
  become_user: root
  shell: |
    export LFS_TGT=$(uname -m)-lfs-linux-gnu
    ../configure --target=$LFS_TGT --prefix={{ lfs.tools_dir }} --with-glibc-version={{ lfs.glibc_version }} --with-sysroot=$LFS \
    --with-newlib --without-headers --with-local-prefix={{ lfs.tools_dir }} --with-native-system-header-dir={{ lfs.tools_dir }}/include \
    --disable-nls --disable-shared --disable-multilib --disable-decimal-float --disable-threads --disable-libatomic \
    --disable-libgomp --disable-libmpx --disable-libquadmath --disable-libssp --disable-libvtv --disable-libstdcxx --enable-languages=c,c++
  args:
    chdir: "{{ lfs.mnt_dir }}/sources/gcc-{{ lfs.gcc_version }}/build"
  environment:
    LFS: "{{ lfs.mnt_dir }}"


- name: Build GCC
  become_user: root
  shell: make -j $(echo "$(cat /proc/cpuinfo | grep processor | tail -1 | awk '{print $3}') - 1" | bc)
  args:
    chdir: "{{ lfs.mnt_dir }}/sources/gcc-{{ lfs.gcc_version }}/build"


- name: Install GCC
  become_user: root
  shell: make install
  args:
    chdir: "{{ lfs.mnt_dir }}/sources/gcc-{{ lfs.gcc_version }}/build"


- name: Clean Up the Sources
  become_user: root
  file:
    path: "{{ lfs.mnt_dir }}/sources/gcc-{{ lfs.gcc_version }}"
    state: absent

